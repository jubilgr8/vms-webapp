{"version":3,"file":"router.effects.js","sourceRoot":"","sources":["../../../../../../libs/ngrx-router/src/lib/+state/router.effects.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,iBAAiB,CAAC;AAC3C,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAC;AACzC,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;AAC9D,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAC1C,OAAO,KAAK,aAAa,MAAM,kBAAkB,CAAC;;;;;AAGlD,MAAM,OAAO,aAAa;IA6BxB,YAAoB,OAAgB,EAAU,MAAc,EAAU,QAAkB;QAApE,YAAO,GAAP,OAAO,CAAS;QAAU,WAAM,GAAN,MAAM,CAAQ;QAAU,aAAQ,GAAR,QAAQ,CAAU;QA5BxF,cAAS,GAAG,YAAY,CACtB,GAAG,EAAE,CACH,IAAI,CAAC,OAAO,CAAC,IAAI,CACf,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC,EACxB,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,EACxB,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,WAAW,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,kBAAI,WAAW,IAAK,MAAM,EAAG,CAAC,CACtG,EACH,EAAE,QAAQ,EAAE,KAAK,EAAE,CACpB,CAAC;QAEF,kBAAa,GAAG,YAAY,CAC1B,GAAG,EAAE,CACH,IAAI,CAAC,OAAO,CAAC,IAAI,CACf,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,EAC1B,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAChC,EACH,EAAE,QAAQ,EAAE,KAAK,EAAE,CACpB,CAAC;QAEF,qBAAgB,GAAG,YAAY,CAC7B,GAAG,EAAE,CACH,IAAI,CAAC,OAAO,CAAC,IAAI,CACf,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,EAC7B,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,CACnC,EACH,EAAE,QAAQ,EAAE,KAAK,EAAE,CACpB,CAAC;IAEyF,CAAC;;0EA7BjF,aAAa;qDAAb,aAAa,WAAb,aAAa;uFAAb,aAAa;cADzB,UAAU","sourcesContent":["import { Location } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Actions, ofType, createEffect } from '@ngrx/effects';\nimport { map, tap } from 'rxjs/operators';\nimport * as RouterActions from './router.actions';\n\n@Injectable()\nexport class RouterEffects {\n  navigate$ = createEffect(\n    () =>\n      this.action$.pipe(\n        ofType(RouterActions.go),\n        map(action => action.to),\n        tap(({ path, query: queryParams, extras }) => this.router.navigate(path, { queryParams, ...extras })),\n      ),\n    { dispatch: false },\n  );\n\n  navigateBack$ = createEffect(\n    () =>\n      this.action$.pipe(\n        ofType(RouterActions.back),\n        tap(() => this.location.back()),\n      ),\n    { dispatch: false },\n  );\n\n  navigateForward$ = createEffect(\n    () =>\n      this.action$.pipe(\n        ofType(RouterActions.forward),\n        tap(() => this.location.forward()),\n      ),\n    { dispatch: false },\n  );\n\n  constructor(private action$: Actions, private router: Router, private location: Location) {}\n}\n"]}